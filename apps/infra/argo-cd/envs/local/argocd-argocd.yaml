apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: argocd
  namespace: argocd
spec:
  sourceNamespaces:
    - sample-argocd
    # As of now, wildcards are not supported in .spec.applicationSet.sourceNamespaces
    # *-argocd
  # https://github.com/argoproj/argo-cd/discussions/12780
  resourceTrackingMethod: annotation+label
  extraConfig:
    # Add the apiKey capability for the admin account
    accounts.admin: apiKey
  tls:
    ca:
      #    configMapName: example-argocd-ca
      #    secretName: example-argocd-ca
    initialCerts:
      foo: |
        -----BEGIN CERTIFICATE-----
        MIIDsDCCApigAwIBAgIIcdkwvM7AvRcwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
        AxMKa3ViZXJuZXRlczAeFw0yNTA1MjYxNTI0MTZaFw0yNjA1MjYxNTI5MTZaMBkx
        FzAVBgNVBAMTDmt1YmUtYXBpc2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
        MIIBCgKCAQEA1dymVZqvh32JI8FyoOajgOPJwVtcorXOKveWE6AWtpK8feczHkQ5
        vAdVyoUVT3OvvsRPHn65kc2mcjKCInLf68SOQ8uJ1glEcb8G+GP1NTE/qNrJBPYB
        kkW2pidGtBPqbVYUKUcmVceNKDM1AJHcIFWIoTRE1d3eT2uzv/RWSkvi1gBy9grt
        +wmYnkSymakLixgC/VsjMU7RaNihBNb2hrtKZ+Ga3/ji/jgUBIrlo8D/3vqZZaNv
        F0UPrt4JTmL3vvPvUqTkl2qNYZTnBy92wQhzm//Hw6EhNIN+4ub9LD/37J48u10E
        68KyHZzcV3YQhBAEPKt8S/zJsx7dPa2eDwIDAQABo4H/MIH8MA4GA1UdDwEB/wQE
        AwIFoDATBgNVHSUEDDAKBggrBgEFBQcDATAMBgNVHRMBAf8EAjAAMB8GA1UdIwQY
        MBaAFK0FfJE0AkUPp48EB5a8orCtbN+aMIGlBgNVHREEgZ0wgZqCHWFyZ29jZC1j
        b25kdWN0ci1jb250cm9sLXBsYW5lggprdWJlcm5ldGVzghJrdWJlcm5ldGVzLmRl
        ZmF1bHSCFmt1YmVybmV0ZXMuZGVmYXVsdC5zdmOCJGt1YmVybmV0ZXMuZGVmYXVs
        dC5zdmMuY2x1c3Rlci5sb2NhbIIJbG9jYWxob3N0hwQKUAABhwSsEgADhwR/AAAB
        MA0GCSqGSIb3DQEBCwUAA4IBAQCiXdfQ5JXZL4kL70Af8SYsDCXHgscOLCRTF2dL
        11tz/xlAeeNFTZGFBiCI72UEiMVyWpHd0LtNG3boyl/FvXB/QKlUhQ+8+sYxLFdm
        0pejvtyp2Bis0zFQSq/E0y1mIPdGnzt9PHAXVB88vE+ZWo0PAQ6VWzMaKOwqoIsc
        Kr5IdpLFrvV+RXg22+N7XdF2EmzNod9NrloRQ5iq9tUJX8GmfcYbP6fHym51JrCG
        rmhDMBI/POfwm3I8mrgMS3QMJHTEGfS8Jeod3mx2dgfflf+j2XKba84cXnoZj2T7
        +O45MgrRuyV7xXhupqT00XtIUU6ShDZek3HbHom1llynHSiN
        -----END CERTIFICATE-----

  # TODO: Beware of bootstrap failure caused by missing configmap
  repo:
    #mountsatoken: true
    #serviceaccount: argocd-argocd-application-controller
    sidecarContainers:
      # TODO: For openshift cluster slug parameter, we should probably use a job generating the cm
      # and mount it here in the sidecar. This env appears to be available in native helm/kustomize/jsonnet
      # as well though
      - name: cmp
        command: [/var/run/argocd/argocd-cmp-server, --loglevel=debug]
        image: dtzar/helm-kubectl
        # image: deas/helm-kubectl
        # command: [/usr/bin/argocd-cmp-server, --loglevel=debug]
        # imagePullPolicy: Never
        envFrom:
          - configMapRef:
              name: cluster-env
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: cmp-cluster-env
    volumes:
      - configMap:
          name: cmp-cluster-env
        name: cmp-cluster-env
  # TODO: Needed for the Service Monitors. Appears it brings in an prometheus-argocd sts we don't want :/
  prometheus:
    enabled: true
  # TODO: The operator does not detect the creation of the prometheus crds. Needs restart if prometheus comes in late
  monitoring:
    enabled: true
  # defaultClusterScopedRoleDisabled: false
  applicationSet:
    enabled: True # Should have been enabled by default?
    sourceNamespaces:
      - sample-argocd
  server:
    insecure: true
    enableRolloutsUI: true
    host: argocd-server.apps-crc.testing # TODO
    ingress:
      enabled: true
      # IngressClassName: nginx
      path: /
      annotations:
        route.openshift.io/termination: edge
    service:
      type: NodePort # LoadBalancer
  kustomizeBuildOptions: "--enable-alpha-plugins --enable-star --enable-exec --enable-helm"
  # CMP via ConfigMap deprecated and removed in argo-cd 2.8
  #configManagementPlugins: |
  #  - name: kustomized-helm
  #    init:
  #      command: ["/bin/sh", "-c"]
  #      args: ["helm dependency build || true"]
  #    generate:
  #      command: ["/bin/sh", "-c"]
  #      args: ["helm template ../../helm_base --name-template $ARGOCD_APP_NAME --include-crds > ../../helm_base/all.yml && kustomize build"]
  #resourceIgnoreDifferences:
  #  all:
  #    jsonPointers:
  #      - /spec/replicas
  #    managedFieldsManagers:
  #      - kube-controller-manager
  #  resourceIdentifiers:
  #    - group: admissionregistration.k8s.io
  #      kind: MutatingWebhookConfiguration
  #      customization:
  #        jqPathExpressions:
  #          - ".webhooks[]?.clientConfig.caBundle"
  #    - group: apps
  #      kind: Deployment
  #      customization:
  #        managedFieldsManagers:
  #          - kube-controller-manager
  #        jsonPointers:
  #          - /spec/replicas
  resourceHealthChecks:
    - group: operators.coreos.com
      kind: Subscription
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.state ~= nil then
            if obj.status.state == "AtLatestKnown" then
              hs.message = obj.status.state .. " - " .. obj.status.currentCSV
              hs.status = "Healthy"
            end
          end
        end
        return hs
    - group: argoproj.io
      kind: Application
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
    - group: networking.k8s.io
      kind: Ingress
      check: |
        hs = {}
        if obj.status ~= nil then
          hs.status = "Healthy"
          hs.message = "Ingress Nginx Hack"
        end
        return hs
    - group: bitnami.com
      kind: SealedSecret
      check: |
        hs = {}
        hs.status = "Healthy"
        hs.message = "Controller doesn't report resource status"
        return hs
  #resourceActions:
  #      discovery.lua: |
  #      actions = {}
  #      actions["restart"] = {}
  #      return actions
  #      definitions:
  #      - name: restart
  #        # Lua Script to modify the obj
  #        action.lua: |
  #          local os = require("os")
  #          if obj.spec.template.metadata == nil then
  #              obj.spec.template.metadata = {}
  #          end
  #          if obj.spec.template.metadata.annotations == nil then
  #              obj.spec.template.metadata.annotations = {}
  #          end
  #          obj.spec.template.metadata.annotations["kubectl.kubernetes.io/restartedAt"] = os.date("!%Y-%m-%dT%XZ")
  #          return obj
