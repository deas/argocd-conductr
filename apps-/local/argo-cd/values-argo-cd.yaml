## Argo CD configuration
## Ref: https://github.com/argoproj/argo-cd
##
## TODO: Does not appear to be needed, but redis still has the uid issue
## openshift:
# -- enables using arbitrary uid for argo repo server
# enabled: false
## Argo Configs
configs:
  params:
    server.insecure: "true"
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    # https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/kustomize.md
    kustomize.buildOptions: "--enable-alpha-plugins --enable-star --enable-exec --enable-helm"
    # TODO: Ugh! Really? https://codefresh.io/blog/argo-cd-application-dependencies/
    # https://github.com/argoproj/argo-cd/issues/7437
    # https://argo-cd.readthedocs.io/en/stable/faq/#why-is-my-application-stuck-in-progressing-state
    resource.customizations.health.argoproj.io_Application: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.health ~= nil then
          hs.status = obj.status.health.status
          if obj.status.health.message ~= nil then
            hs.message = obj.status.health.message
          end
        end
      end
      return hs
    resource.customizations.health.networking.k8s.io_Ingress: |
      hs = {}
      if obj.status ~= nil then
        hs.status = "Healthy"
        hs.message = "Ingress Nginx Hack"
      end
      return hs
    resource.customizations.health.bitnami.com_SealedSecret: |
      hs = {}
      hs.status = "Healthy"
      hs.message = "Controller doesn't report resource status"
      return hs
  # Argo CD sensitive data
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
  # secret:
  # -- Bcrypt hashed admin password
  ## Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
  ## `htpasswd -nbBC 10 "" $ARGO_PWD | tr -d ':\n' | sed 's/$2y/$2a/'`
  # argocdServerAdminPassword: ""
  # -- Admin password modification time. Eg. `"2006-01-02T15:04:05Z"`
  # @default -- `""` (defaults to current time)
  # argocdServerAdminPasswordMtime: ""
#configs:
repoServer:
  env:
    - name: XDG_CONFIG_HOME
      value: /.config
    - name: SOPS_AGE_KEY_FILE
      value: /.config/sops/age/keys.txt
    - name: GNUPGHOME
      value: /gnupg-home/.gnupg
    #- name: HTTPS_PROXY
    #  value: "192.168.1.121"
    #- name: HTTP_PROXY
    #  value:
    #- name: NO_PROXY
    #  value:
  initContainers:
    - name: install-ksops
      image: viaductoss/ksops:v4.0.1
      command: ["/bin/sh", "-c"]
      args:
        - echo "Installing KSOPS...";
          mv ksops /custom-tools/;
          mv $GOPATH/bin/kustomize /custom-tools/;
          echo "Done.";
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
    - name: import-gpg-key
      image: quay.io/argoproj/argocd:v2.12.4
      command: ["gpg", "--import", "/sops-gpg/sops.asc"]
      env:
        - name: GNUPGHOME
          value: /gnupg-home/.gnupg
      volumeMounts:
        - mountPath: /sops-gpg
          name: sops-gpg
        - mountPath: /gnupg-home
          name: gnupg-home
  volumes:
    - name: custom-tools
      emptyDir: {}
    - name: sops-age
      secret:
        secretName: sops-age
    - name: gnupg-home
      emptyDir: {}
    - name: sops-gpg
      secret:
        secretName: sops-gpg
    #- name: ca-certs
    #  configMap:
    #    name: ca-certs
  volumeMounts:
    - mountPath: /usr/local/bin/kustomize
      name: custom-tools
      subPath: kustomize
    - mountPath: /usr/local/bin/ksops
      name: custom-tools
      subPath: ksops
    - mountPath: /.config/sops/age/keys.txt
      name: sops-age
      subPath: keys.txt
    - mountPath: /gnupg-home/.gnupg
      name: gnupg-home
      subPath: .gnupg
    #- mountPath: /etc/ssl/certs/ca-certificates.crt
    #  name: ca-certs
    #  subPath: ca-certificates.crt
server:
  #configEnabled: true
  #config:
  #  repositories: |
  #    - name: argo-helm
  #      type: helm
  #      url: https://argoproj.github.io/argo-helm
  #additionalApplications:
  #  - name: argocd
  #    namespace: argocd
  #    destination:
  #      namespace: argocd
  #      server: https://kubernetes.default.svc
  #    project: argocd
  #    source:
  #      helm:
  #        version: v3
  #        valueFiles:
  #        - values.yaml
  #        - ../values-override.yaml
  #      path: argocd-install/argo-cd
  #      repoURL: https://github.com/kurtburak/argocd.git
  #      targetRevision: HEAD
  #    syncPolicy:
  #      syncOptions:
  #      - CreateNamespace=true
  #  - name: argocd-apps
  #    namespace: argocd
  #    destination:
  #      namespace: argocd
  #      server: https://kubernetes.default.svc
  #    project: argocd
  #    source:
  #      path: argocd-apps
  #      repoURL: https://github.com/kurtburak/argocd.git
  #      targetRevision: HEAD
  #      directory:
  #        recurse: true
  #        jsonnet: {}
  #    syncPolicy:
  #      automated:
  #        selfHeal: true
  #        prune: true
  #  - name: argocd-appprojects
  #    namespace: argocd
  #    destination:
  #      namespace: argocd
  #      server: https://kubernetes.default.svc
  #    project: argocd
  #    source:
  #      path: argocd-appprojects
  #      repoURL: https://github.com/kurtburak/argocd.git
  #      targetRevision: HEAD
  #      directory:
  #        recurse: true
  #        jsonnet: {}
  #    syncPolicy:
  #      automated:
  #        selfHeal: true
  #        prune: true
  #additionalProjects:
  #- name: argocd
  #  namespace: argocd
  #  additionalLabels: {}
  #  additionalAnnotations: {}
  #  description: Argocd Project
  #  sourceRepos:
  #  - '*'
  #  destinations:
  #  - namespace: argocd
  #    server: https://kubernetes.default.svc
  #  clusterResourceWhitelist:
  #  - group: '*'
  #    kind: '*'
  #  orphanedResources:
  #    warn: false
  #  extraArgs:
  #    - --insecure
  #  configManagementPlugins: |
  ingress:
    enabled: true
    # ingressClassName: nginx
    hosts:
      - argocd-server.apps-crc.testing
    paths:
      - /
    annotations:
      route.openshift.io/termination: edge
  service:
    type: LoadBalancer
